version: 2

images:
  python: &python
    - image: circleci/buildpack-deps:stretch-browsers

machines:
  win-python: &win-python
    image: 'windows-server-2019-vs2019:2022.08.1'
    resource_class: 'windows.medium'
    shell: 'powershell.exe -ExecutionPolicy Bypass'
###############################################################################
utils:
  prepare_container: &prepare_container
    name: Prepare build container
    command: |
      sudo apt-get update
      sudo apt-get install curl pandoc
      sudo apt-get clean
      curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  > miniconda.sh
      bash miniconda.sh -b -p /home/circleci/miniconda
      sudo rm -rf ~/.pyenv/ /opt/circleci/.pyenv/
      source /home/circleci/miniconda/etc/profile.d/conda.sh
      conda create --name=causalnex_env python=${PYTHON_VERSION} -y
      conda activate causalnex_env
      conda install -y virtualenv
      pip install cython
      pip install -U pip setuptools wheel
      sudo apt-get install graphviz

  prepare_machine_windows: &prepare_machine_windows
    name: Prepare build machine for windows
    command: |
      powershell -ExecutionPolicy ByPass -NoExit -Command "& 'C:\tools\miniconda3\shell\condabin\conda-hook.ps1' ; conda activate 'C:\tools\miniconda3' "
      conda init powershell
      conda create --name=causalnex_env python=$Env:PYTHON_VERSION -y
      conda update -n base -c defaults conda -y
      choco install make
      # causalnex_env activation right here doesn't work for some reason. Need to restart shell.

  activate_conda: &activate_conda
    name: Activate conda environment
    command: |
      echo ". /home/circleci/miniconda/etc/profile.d/conda.sh" >> $BASH_ENV
      echo "conda deactivate; conda activate causalnex_env" >> $BASH_ENV

      # needed to control numpy multithreading code since circleci gives incorrect CPU counts
      echo "export MKL_NUM_THREADS=1 && export OMP_NUM_THREADS=1 && export NUMEXPR_NUM_THREADS=1" >> $BASH_ENV

  setup_requirements: &setup_requirements
    name: Install PIP dependencies
    command: |
      echo "Python version: $(python --version 2>&1)"
      pip install -r requirements.txt -U
      pip install -r test_requirements.txt -U
      pip install ".[pytorch]"

  setup_requirements_windows: &setup_requirements_windows
    name: Install PIP dependencies windows
    command: |
      conda activate causalnex_env
      conda install -y virtualenv
      pip install -U pip setuptools wheel
      conda install -y cython
      conda install -c anaconda graphviz=2.50.0 # to be able to import pygraphviz
      pip install -r requirements.txt -U
      #pip install --global-option=build_ext --global-option="-IC:\Program Files\Graphviz\include" --global-option="-LC:\Program Files\Graphviz\lib" pygraphviz
      pip install --global-option=build_ext --global-option="-IC:\tools\miniconda3\pkgs\graphviz-2.50.0-hdb8b0d4_0\Library\include" --global-option="-LC:\tools\miniconda3\pkgs\graphviz-2.50.0-hdb8b0d4_0\Library\lib" pygraphviz
      pip install -r test_requirements.txt -U
      pip install ".[pytorch]"

  setup_pre_commit: &setup_pre_commit
    name: Install pre-commit hooks
    command: |
      conda activate causalnex_env
      pre-commit install --install-hooks
      pre-commit install --hook-type pre-push

  linters: &linters
    name: Run linters and auto-formatters
    command: |
      conda activate causalnex_env
      make lint

  unit_tests: &unit_tests
    name: Run tests
    command: |
      conda activate causalnex_env
      make test

  build_docs: &build_docs
    name: Build documentation
    command: |
      conda activate causalnex_env
      make build-docs

  install_package: &install_package
    name: Install the package
    command: |
      conda activate causalnex_env
      make install

  unit_test_steps: &unit_test_steps
    steps:
      - checkout
      - run: *prepare_container
      - run: *activate_conda
      - run: *setup_requirements
      - run: *unit_tests

  unit_test_steps_windows: &unit_test_steps_windows
    machine: *win-python
    steps:
      - checkout
      - run: *prepare_machine_windows
      - run: *setup_requirements_windows
      - run: *unit_tests
###############################################################################
jobs:

  unit_tests_38:
    docker: *python
    environment:
      PYTHON_VERSION: '3.8'
    <<: *unit_test_steps

  unit_tests_39:
    docker: *python
    environment:
      PYTHON_VERSION: '3.9'
    <<: *unit_test_steps

  unit_tests_310:
    docker: *python
    environment:
      PYTHON_VERSION: '3.10'
    <<: *unit_test_steps

  unit_tests_windows_38:
    environment:
      PYTHON_VERSION: '3.8'
    <<: *unit_test_steps_windows

  unit_tests_windows_39:
    environment:
      PYTHON_VERSION: '3.9'
    <<: *unit_test_steps_windows

  unit_tests_windows_310:
    environment:
      PYTHON_VERSION: '3.10'
    <<: *unit_test_steps_windows

  linters_38:
    docker: *python
    environment:
      PYTHON_VERSION: '3.8'
    steps:
      - checkout
      - run: *prepare_container
      - run: *activate_conda
      - run: *setup_requirements
      - run: *setup_pre_commit
      - run: *linters
      - run: *install_package

  docs:
    docker: *python
    environment:
      PYTHON_VERSION: '3.8'
    steps:
      - checkout
      - run: *prepare_container
      - run: *activate_conda
      - run: *setup_requirements
      - run: *build_docs

  all_circleci_checks_succeeded:
    docker:
      - image: circleci/python  # any light-weight image
    steps:
      - run:
          name: Success!
          command: echo "All checks passed"


###############################################################################
workflows:
  version: 2
  regular:
    jobs:
      - unit_tests_38
      - unit_tests_39
      - unit_tests_310
      - linters_38
      - docs
      - unit_tests_windows_38
      - unit_tests_windows_39
      - unit_tests_windows_310
      - all_circleci_checks_succeeded:
          requires:
            - unit_tests_38
            - unit_tests_39
            - unit_tests_310
            - linters_38
            - docs
            - unit_tests_windows_38
            - unit_tests_windows_39
            - unit_tests_windows_310
