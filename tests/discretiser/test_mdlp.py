# Copyright 2019-2020 QuantumBlack Visual Analytics Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
# NONINFRINGEMENT. IN NO EVENT WILL THE LICENSOR OR OTHER CONTRIBUTORS
# BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF, OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# The QuantumBlack Visual Analytics Limited ("QuantumBlack") name and logo
# (either separately or in combination, "QuantumBlack Trademarks") are
# trademarks of QuantumBlack. The License does not grant you any right or
# license to the QuantumBlack Trademarks. You may not use the QuantumBlack
# Trademarks or any confusingly similar mark as a trademark for your product,
#     or use the QuantumBlack Trademarks in any other manner that might cause
# confusion in the marketplace, including but not limited to in advertising,
# on websites, or on software.
#
# See the License for the specific language governing permissions and
# limitations under the License.
from importlib import reload

import numpy as np
import pytest
from mock import patch

from causalnex.discretiser import discretiser_strategy
from causalnex.discretiser.discretiser_strategy import MDLPSupervisedDiscretiserMethod


class TestMDLP:
    def test_output(self, get_iris_data):
        ground_truth = np.array(
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 1, 2, 0, 2, 0],
                [0, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2],
                [2, 2, 2, 2, 1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 1],
                [1, 2, 1, 0, 1, 1, 1, 2, 0, 1, 2, 1, 2, 2, 2],
                [2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2],
                [2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                [2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2],
            ]
        )  # ground_truth is generated by manually use MDLP to extract thresholds

        discretiser = MDLPSupervisedDiscretiserMethod(
            {"min_depth": 0, "random_state": 2020, "min_split": 1e-3, "dtype": int}
        )

        discretiser.fit(
            feat_names=["sepal length (cm)"],
            dataframe=get_iris_data,
            target_continuous=False,
            target="target",
        )

        output = discretiser.transform(get_iris_data[["sepal length (cm)"]]).values
        assert (output.reshape(-1, 15) == ground_truth).all()

    def test_target_continuous(self, get_iris_data):

        discretiser = MDLPSupervisedDiscretiserMethod(
            {"min_depth": 0, "random_state": 17, "min_split": 1e-3, "dtype": int}
        )

        with pytest.raises(ValueError):
            discretiser.fit(
                feat_names=["sepal length (cm)"],
                dataframe=get_iris_data,
                target_continuous=True,
                target="target",
            )

    def test_warning_import(self, caplog):
        with patch.dict("sys.modules", {"mdlp.discretization": None}):
            reload(discretiser_strategy)
        reload(discretiser_strategy)
        assert "MDLP was not imported successfully" in caplog.text

    def test_import_error(self):
        with patch.dict("sys.modules", {"mdlp.discretization": None}):
            reload(discretiser_strategy)
            with pytest.raises(ImportError):
                discretiser_strategy.MDLPSupervisedDiscretiserMethod(
                    {
                        "min_depth": 0,
                        "random_state": 2020,
                        "min_split": 1e-3,
                        "dtype": int,
                    }
                )
        reload(discretiser_strategy)

    def test_default_args(self):
        discretiser = MDLPSupervisedDiscretiserMethod()
        params = discretiser.get_params()
        assert params["mdlp_args"]["min_depth"] == 0
        assert params["mdlp_args"]["min_split"] == 1e-3
        assert params["mdlp_args"]["dtype"] == int
